/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2020 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_PROCEDURAL_BIOME
#define OSGEARTH_PROCEDURAL_BIOME 1

#include "Export"
#include <osgEarth/Config>
#include <osgEarth/URI>
#include <osgEarth/Units>
#include <osgEarth/GeoData>
#include <osgEarth/LandCover>
#include <osg/BoundingBox>

namespace osgEarth
{
    namespace Procedural
    {
        using namespace osgEarth;

        /**
         * Individual artwork asset reference within a biome
         */
        class OSGEARTHPROCEDURAL_EXPORT ModelAsset : public osg::Referenced
        {
        public:
            OE_OPTION(std::string, name);
            OE_OPTION(URI, modelURI);
            OE_OPTION(URI, sideBillboardURI);
            OE_OPTION(URI, topBillboardURI);
            OE_OPTION(float, width);
            OE_OPTION(float, height);
            OE_OPTION(float, sizeVariation);
            OE_OPTION(float, selectionWeight);

            ModelAsset() { }
            ModelAsset(const Config& conf);

            Config getConfig() const;
        };

        /**
         * Individual artwork asset reference within a biome
         */
        class OSGEARTHPROCEDURAL_EXPORT GroundTextureAsset : public osg::Referenced
        {
        public:
            OE_OPTION(std::string, name);
            OE_OPTION(URI, uri);
            OE_OPTION(float, width);
            OE_OPTION(float, height);

        public:
            GroundTextureAsset() { }
            GroundTextureAsset(const Config& conf);
            Config getConfig() const;

        protected:
            ~GroundTextureAsset() { }
        };

        /**
         * Contains all assets.
         */
        class OSGEARTHPROCEDURAL_EXPORT AssetCatalog : public osg::Referenced
        {
        public:
            AssetCatalog() { }
            AssetCatalog(const Config& conf);

            //GroundTextureAsset* getTexture(const std::string& name) const;

            ModelAsset* getModel(const std::string& name) const;

            const std::vector<osg::ref_ptr<GroundTextureAsset>>& getTextures() const;

        public:
            Config getConfig() const;

        protected:
            virtual ~AssetCatalog() { }

            std::vector<osg::ref_ptr<GroundTextureAsset>> _textures;
            //std::unordered_map<std::string, osg::ref_ptr<GroundTextureAsset>> _textures;
            std::unordered_map<std::string, osg::ref_ptr<ModelAsset>> _models;
        };

        /**
         * Groups together some ModelAssets for use in a single
         * ground cover layer
         */
        class OSGEARTHPROCEDURAL_EXPORT ModelCategory : public osg::Referenced
        {
        public:
            ModelCategory() { }
            ModelCategory(const Config& conf, AssetCatalog* assets);

            struct Usage {
                osg::ref_ptr<ModelAsset> asset;
                int weight;
            };

            OE_OPTION(std::string, name);
            OE_OPTION_VECTOR(Usage, assets);

            Config getConfig() const;
        };

        /** 
         * A subset of graphical assets that will be used
         * in a particular geographic region.
         */
        class OSGEARTHPROCEDURAL_EXPORT Biome : public osg::Referenced
        {
        public:
            Biome() { }
            Biome(const Config& conf, AssetCatalog* assets);
            Config getConfig() const;

            OE_OPTION(std::string, name);
            OE_OPTION(int, id);
            OE_OPTION_VECTOR(osg::ref_ptr<ModelCategory>, modelCategories);

            //! Find a named model group
            const ModelCategory* getModelCategory(const std::string& name) const;
            
        protected:
            virtual ~Biome() { }
        };


        /**
         * Mappings from land use classification types to lifemap parameters.
         */
        class OSGEARTHPROCEDURAL_EXPORT LandUseType
        {
        public:
            LandUseType() { }
            LandUseType(const Config& conf);
            Config getConfig() const;

            OE_OPTION(std::string, id);
            OE_OPTION(float, dense);
            OE_OPTION(float, lush);
            OE_OPTION(float, rugged);
        };


        /**
         * Mappings from land use classification types to lifemap parameters.
         */
        class OSGEARTHPROCEDURAL_EXPORT LandUseCatalog : public osg::Referenced
        {
        public:
            LandUseCatalog() { }
            LandUseCatalog(const Config& conf);
            Config getConfig() const;

            OE_OPTION_VECTOR(LandUseType, landUseTypes);

            const LandUseType* getLandUse(const std::string& id) const;

        private:
            std::unordered_map<std::string, LandUseType> _lut;
        };


        class OSGEARTHPROCEDURAL_EXPORT BiomeCatalog : public osg::Referenced
        {
        public:
            BiomeCatalog() { }
            BiomeCatalog(const Config& conf);

            //! Fetch a biome by its unique ID
            const Biome* getBiome(int id) const;

            //! Vector of all biomes in the catalog
            void getBiomes(std::vector<osg::ref_ptr<const Biome>>& biomes) const;

            //! Asset catalog
            const AssetCatalog* getAssets() const;

            //! Land use catalog
            const LandUseCatalog* getLandUse() const;

        public:
            Config getConfig() const;

        protected:
            virtual ~BiomeCatalog() { }

            osg::ref_ptr<AssetCatalog> _assets;
            osg::ref_ptr<LandUseCatalog> _landuse;
            std::unordered_map<int, osg::ref_ptr<Biome>> _biomes;
        };

} } // namespace osgEarth::Procedural

#endif
