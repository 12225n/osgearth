/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2018 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_UTIL_FLATTENING_LAYER
#define OSGEARTH_UTIL_FLATTENING_LAYER 1

#include <osgEarthUtil/Common>
#include <osgEarth/TileSource>
#include <osgEarth/ElevationLayer>
#include <osgEarth/ElevationPool>
#include <osgEarth/LayerListener>
#include <osgEarthFeatures/FeatureSource>
#include <osgEarthFeatures/ScriptEngine>
#include <osgEarthSymbology/StyleSheet>
#include <osgDB/FileNameUtils>

namespace osgEarth { namespace Util
{
    using namespace osgEarth;
    using namespace osgEarth::Features;
    using namespace osgEarth::Symbology;

    /**
     * Serializable options to configure a FlatteningLayer.
     */
    class OSGEARTHUTIL_EXPORT FlatteningLayerOptions : public ElevationLayerOptions
    {
    public:
        META_LayerOptions(osgEarth, FlatteningLayerOptions, ElevationLayerOptions);
        
        /** Name of the feature source layer to use for flattening. */
        optional<std::string>& featureSource() { return _featureSource; }
        const optional<std::string>& featureSource() const { return _featureSource; }

        /** For line features, the width around the line to flatten. */
        optional<NumericExpression>& lineWidth() { return _lineWidth; }
        const optional<NumericExpression>& lineWidth() const { return _lineWidth; }

        /** Width of the buffer between the flattened terrain and the natural terrain,
            which will serve as a transition area. */
        optional<NumericExpression>& bufferWidth() { return _bufferWidth; }
        const optional<NumericExpression>& bufferWidth() const { return _bufferWidth; }

        //! Whether to write all samples (default=false) with source elev instead of
        //! writing NO_DATA_VALUE where no features exist
        optional<bool>& fill() { return _fill; }
        const optional<bool>& fill() const { return _fill; }

        StyleSheet::ScriptDef* getScript() const { return _script.get(); }

    public:
        Config getConfig() const;
        
    private:
        void fromConfig(const Config&);
        optional<std::string> _featureSource;
        optional<NumericExpression> _lineWidth;
        optional<NumericExpression> _bufferWidth;
        optional<bool> _fill;
        osg::ref_ptr< StyleSheet::ScriptDef > _script;
    };

    /**
     * Elevation layer that overlays modified elevation samples intended to
     * flatten the terrain around vector features. The use case is to make
     * roads flat or prevent rivers and lakes from sloping with the terrain.
     */
    class OSGEARTHUTIL_EXPORT FlatteningLayer : public ElevationLayer
    {
    public:
        META_Layer(osgEarth, FlatteningLayer, FlatteningLayerOptions, ElevationLayer, FlattenedElevation);

        // Feature source layer to get features from
        void setFeatureSource(FeatureSource* layer);

    public: // ElevationLayer

        virtual void init();

        // opens the layer and returns the status
        virtual const Status& open();

    protected: // ElevationLayer

        //virtual void createImplementation(
        //    const TileKey& key,
        //    osg::ref_ptr<osg::HeightField>& hf,
        //    osg::ref_ptr<NormalMap>& normalMap,
        //    ProgressCallback* progres);

        virtual GeoHeightField createHeightFieldImplementation(
            const TileKey& key, 
            ProgressCallback* progress) const;

        //! called by the map when this layer is added
        virtual void addedToMap(const class Map*);

        //! called by the map when this layer is removed
        virtual void removedFromMap(const class Map*);

    protected:

        virtual ~FlatteningLayer();

    private:

        osg::ref_ptr<ElevationPool> _pool;
        osg::ref_ptr<ScriptEngine> _scriptEngine;
        osg::ref_ptr<FeatureSource> _features;
        LayerListener<FlatteningLayer, FeatureSource> _featureLayerListener;
        osg::observer_ptr< const Map > _map;
    };

} } // namespace osgEarth::Util

#endif // OSGEARTH_UTIL_FLATTENING_LAYER
