/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_SPLAT_GROUND_COVER_LAYER_H
#define OSGEARTH_SPLAT_GROUND_COVER_LAYER_H

#include "Export"
#include "Biome"
#include <osgEarth/PatchLayer>
#include <osgEarth/LayerReference>
#include <osgEarth/LandCoverLayer>
#include <osgEarth/InstanceCloud>
#include <osgEarth/VirtualProgram>

namespace osgEarth { namespace Splat
{
    using namespace osgEarth;

    //! Layer that renders billboards on the ground using the GPU,
    //! like trees, grass, rocks, etc.
    class OSGEARTHSPLAT_EXPORT GroundCoverLayer : public PatchLayer
    {
    public:
        class OSGEARTHSPLAT_EXPORT Options : public PatchLayer::Options {
        public:
            META_LayerOptions(osgEarth, Options, PatchLayer::Options);
            OE_OPTION_LAYER(ImageLayer, maskLayer);
            OE_OPTION_LAYER(ImageLayer, colorLayer);
            OE_OPTION(float, colorMinSaturation);
            OE_OPTION(unsigned, lod);
            OE_OPTION(bool, castShadows);
            OE_OPTION(float, maxAlpha);
            OE_OPTION(bool, alphaToCoverage);
            OE_OPTION(float, maxSSE);
            OE_OPTION_VECTOR(BiomeZone, biomeZones);
            virtual Config getConfig() const;
        private:
            void fromConfig(const Config& conf);
        };

    public:
        META_Layer(osgEarth, GroundCoverLayer, Options, PatchLayer, GroundCover);

        //! Layer containing required coverage data
        void setLandCoverLayer(LandCoverLayer* landCoverLayer);
        LandCoverLayer* getLandCoverLayer() const;

        //! Layer containing the land cover dictionary.
        void setLandCoverDictionary(LandCoverDictionary* landCoverDict);
        LandCoverDictionary* getLandCoverDictionary() const;

        //! Masking layer (optional)
        void setMaskLayer(ImageLayer* layer);
        ImageLayer* getMaskLayer() const;

        //! Color modulation layer
        void setColorLayer(ImageLayer* layer);
        ImageLayer* getColorLayer() const;

        //! Set the maximum screen-space error (pixels)
        void setMaxSSE(float pixels);
        float getMaxSSE() const;

        //! LOD at which to draw ground cover
        void setLOD(unsigned value);
        unsigned getLOD() const;

        //! Geogrphic zones; at least one is required
        std::vector<BiomeZone>& getZones() { return options().biomeZones(); }
        const std::vector<BiomeZone>& getZones() const { return options().biomeZones(); }

        //! Whether the ground cover casts shadows on the terrain
        void setCastShadows(bool value);
        bool getCastShadows() const;

        //! Transparency threshold below which to discard fragments.
        //! Only applies when alpha-to-coverage mode is OFF.
        void setMaxAlpha(float value);
        float getMaxAlpha() const;

        //! Whether to enable alpha-to-coverage mode.
        //! Only use this when multisampling it ON
        void setUseAlphaToCoverage(bool value);
        bool getUseAlphaToCoverage() const;

    protected:

        //! Override post-ctor init
        virtual void init();

        //! Override layer open
        virtual Status openImplementation();

        //! Override layer close
        virtual Status closeImplementation();

        //! Get geometry for a tilekey
        virtual osg::Node* createNodeImplementation(const DrawContext& dc);

    public:

        //! Called when this layer is added to the map
        virtual void addedToMap(const Map* map);
        virtual void removedFromMap(const Map* map);
        virtual void setTerrainResources(TerrainResources*);

        virtual void resizeGLObjectBuffers(unsigned maxSize);
        virtual void releaseGLObjects(osg::State* state) const;

    protected:
        virtual ~GroundCoverLayer();

        LayerReference<LandCoverDictionary> _landCoverDict;
        LayerReference<LandCoverLayer> _landCoverLayer;

        TextureImageUnitReservation _noiseBinding;

        void buildStateSets();

        struct LayerAcceptor : public PatchLayer::AcceptCallback
        {
            GroundCoverLayer* _layer;
            LayerAcceptor(GroundCoverLayer* layer) : _layer(layer) { }
            bool acceptLayer(osg::NodeVisitor& nv, const osg::Camera* camera) const;
            bool acceptKey(const TileKey& key) const;
        };
        friend struct LayerAcceptor;

        struct ZoneSelector : public Layer::TraversalCallback
        {
            GroundCoverLayer* _layer;
            ZoneSelector(GroundCoverLayer* layer) : _layer(layer) { }
            void operator()(osg::Node*, osg::NodeVisitor*) const;
        };
        friend struct ZoneSelector;

        struct TileGenInfo {
            TileGenInfo() : _revision(-1), _dirty(true), _expired(false) { }
            TileKey _key;
            int _revision;
            bool _dirty;
            bool _expired;
        };
        
        typedef std::unordered_map<TileKey, TileGenInfo> TileGenInfoMap;
        
        typedef std::set<int> TileGenFreeList;

        struct TileManager
        {
            std::vector<TileGenInfo> _current;
            std::vector<TileGenInfo> _new;
            int _highestOccupiedSlot;

            TileManager();
            void reset();
            int allocate(const TileKey& key, int revision);
            int release(const TileKey& key);
            void release(int slot);
            int getSlot(const TileKey& key) const;
            bool inUse(int slot) const;
        };

        // Custom GL renderer for ground cover.
        // This is a PatchLayer callback that intercepts the drawing of a
        // terrain tile to do custom rendering with access to the tile's data.
        struct Renderer : public PatchLayer::DrawCallback
        {
            Renderer(GroundCoverLayer* layer);
            ~Renderer();

            // Uniform data must be maintained for each unique PCP
            struct PCPState
            {
                PCPState();
                GLint _generateDataUL;
                float _generateData[5];
                GLint _A2CUL;
                GLint _contextIdUL;
            };
            typedef std::unordered_map<const void*, PCPState> PCPStateMap;

            typedef std::unordered_map<const void*, osg::ref_ptr<InstanceCloud> > InstancerPerZone;

            // Data unique to a specific camera traversal
            // (multiple views, shadow cams, etc)
            struct CameraState
            {
                CameraState() { }

                // Track zone changes
                const osg::StateAttribute* _previousZoneSA;
                const osg::StateAttribute* _currentZoneSA;

                // Asset catalog differs by zone
                InstancerPerZone _instancers;

                // Uniform locations differ by PCP
                PCPStateMap _pcpState;

                // Points to shared renderer object
                Renderer* _renderer;

                // tracks the last know batch ID so we know when to regenerate tiles
                std::size_t _lastTileBatchID;
                osg::Matrixf _lastMVP;
                unsigned _numTilesGenerated;

                // Track in-GPU tile set
                TileManager _tiles;

                // compute pass
                unsigned _pass;
            };
            typedef PerObjectFastMap<const osg::Camera*, CameraState> CameraStateMap;

            mutable CameraStateMap _cameraState;

            struct CameraStateRGLO : public CameraStateMap::ConstFunctor {
                CameraStateRGLO(osg::State* state) : _state(state) { }
                void operator()(const CameraState& ds) const;
                osg::State* _state;
            };

            // uniform IDs
            unsigned _computeDataUName;
            unsigned _A2CName;
            unsigned _contextIdUName;

            void applyLocalState(osg::RenderInfo& ri, CameraState& ds);

            // DrawCallback API
            void visitTileBatch(osg::RenderInfo& ri, const TileBatch* tiles);
            void visitTile(osg::RenderInfo& ri, const DrawContext& tile);

            void resizeGLObjectBuffers(unsigned maxSize);
            void releaseGLObjects(osg::State* state) const;

            double _tileWidth;
            GroundCoverLayer* _layer;
            osg::ref_ptr<osg::StateAttribute> _a2cBlending;

            osg::ref_ptr<osg::StateSet> _computeSS;
            osg::Program* _computeProgram;

            float _spacing;

            osg::ref_ptr<GeometryCloud> _geomCloud;
            osg::ref_ptr<osg::Texture> _noiseTex;
            osg::ref_ptr<TextureArena> _texArena;
        };

        osg::ref_ptr<Renderer> _renderer;
        bool _debug;
        osg::ref_ptr<osg::Drawable> _debugDrawable;


        virtual void loadRenderingShaders(
            VirtualProgram* vp,
            const osgDB::Options* options) const;

        // create a stand-in geometry for the shader to manipulate
        // (for billboards, etc)
        virtual osg::Geometry* createParametricGeometry() const;

        osg::Shader* createLUTShader() const;

        struct AssetData : public osg::Referenced
        {
            osg::ref_ptr<osg::Node> _model;

            const BiomeZone* _zone;
            const LandCoverGroup* _landCoverGroup;
            const AssetUsage* _asset;

            int _zoneIndex;
            int _landCoverGroupIndex;

            // texture atlas indexes
            osg::ref_ptr<Texture> _sideBillboardTex;
            int _sideBillboardTexIndex;

            osg::ref_ptr<Texture> _topBillboardTex;
            int _topBillboardTexIndex;

            osg::ref_ptr<Texture> _modelTex;
            int _modelTexIndex;

            // number of instances of this asset (for selection weight purposes)
            int _numInstances;
            std::vector<int> _codes;

            osg::BoundingBox _modelAABB;

            int _assetID; // sequential unique ID of this asset
            int _modelID; // sequential unique ID of the asset's model (may or may not have one)
        };

        void loadAssets(TextureArena*);
        typedef std::vector<osg::ref_ptr<AssetData> > AssetDataVector;
        AssetDataVector _liveAssets;

        typedef std::vector<osg::ref_ptr<osg::Image> > ImageVector;

        osg::StateSet* getZoneStateSet(unsigned index) const;
        std::vector<osg::ref_ptr<osg::StateSet> > _zoneStateSets;

        GeometryCloud* createGeometryCloud(TextureArena*) const;

        osg::ref_ptr<const Profile> _mapProfile;

        osg::ref_ptr<osg::Uniform> _sseU;
    };

} } // namespace osgEarth::Splat
OSGEARTH_SPECIALIZE_CONFIG(osgEarth::Splat::GroundCoverLayer::Options);

#endif // OSGEARTH_SPLAT_GROUND_COVER_LAYER_H
