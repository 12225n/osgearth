/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2018 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_FEATURES_XYZ_FEATURESOURCE_LAYER
#define OSGEARTH_FEATURES_XYZ_FEATURESOURCE_LAYER

#include <osgEarthFeatures/FeatureSource>

using namespace osgEarth;
using namespace osgEarth::Features;
using namespace osgEarth::Symbology;

/**
 * A FeatureSource that reads feature tiles from a parameterized "XYZ" source.
 */
namespace osgEarth { namespace Features
{
    class OSGEARTHFEATURES_EXPORT XYZFeatureSourceOptions : public FeatureSourceOptions
    {
    public:
        META_LayerOptions(osgEarth, XYZFeatureSourceOptions, FeatureSourceOptions);

        optional<URI>& url() { return _url; }
        const optional<URI>& url() const { return _url; }
                
        /** Data format extension of TFS data (json, gml) */
        optional<std::string>& format() { return _format; }
        const optional<std::string>& format() const { return _format; }        

        optional<bool>& invertY() { return _invertY; }
        const optional<bool>& invertY() const { return _invertY; }

        optional<int>& minLevel() { return _minLevel; }
        const optional<int>& minLevel() const { return _minLevel; }

        optional<int>& maxLevel() { return _maxLevel; }
        const optional<int>& maxLevel() const { return _maxLevel; }
        
    public:
        virtual Config getConfig() const;

    private:
        void fromConfig(const Config& conf);
        
        optional<URI>         _url;        
        optional<std::string> _format;
        optional<bool>        _invertY;
        optional<int>         _minLevel;
        optional<int>         _maxLevel;
    };

    /**
     * Feature Layer that accesses features via one of the many GDAL/OGR drivers.
     */
    class OSGEARTHFEATURES_EXPORT XYZFeatureSource : public FeatureSource
    {   
    public:
        META_Layer(osgEarth, XYZFeatureSource, XYZFeatureSourceOptions, FeatureSource, xyzfeatures);

    public:

    public: // Layer

        virtual const Status& open();

    protected:

        virtual void init();

    public: // FeatureLayer

        virtual FeatureCursor* createFeatureCursor(const Symbology::Query& query, ProgressCallback* progress);        
        
        virtual const FeatureSchema& getSchema() const { return _schema; }

    protected:

        virtual ~XYZFeatureSource() { }

    private:
        FeatureSchema _schema;
        std::string _template;
        std::string _rotateChoices;
        std::string _rotateString;
        std::string::size_type _rotateStart, _rotateEnd;
        OpenThreads::Atomic _rotate_iter;
        
        bool getFeatures( const std::string& buffer, const TileKey& key, const std::string& mimeType, FeatureList& features);
        std::string getExtensionForMimeType(const std::string& mime);
        bool isGML( const std::string& mime ) const;
        bool isJSON( const std::string& mime ) const;
        URI createURL(const Symbology::Query& query);
    };

} } // namespace osgEarth::Features

OSGEARTH_SPECIALIZE_CONFIG(osgEarth::Features::XYZFeatureSourceOptions);

#endif // OSGEARTH_FEATURES_XYZ_FEATURESOURCE_LAYER
