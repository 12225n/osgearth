/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_PROCEDURAL_LIFE_MAP_LAYER_H
#define OSGEARTH_PROCEDURAL_LIFE_MAP_LAYER_H

#include "Export"
#include "BiomeLayer"
#include <osgEarth/ImageLayer>
#include <osgEarth/ElevationPool>
#include <osgEarth/LayerReference>
#include <osgEarth/LandCoverLayer>
#include <future>

namespace osgEarth {
    class TextureArena;
}

namespace osgEarth { namespace Procedural
{
    using namespace osgEarth;

    class OSGEARTHPROCEDURAL_EXPORT LifeMapLayer : public ImageLayer
    {
    public:
        struct LandCoverLifeMapping {
            LandCoverLifeMapping(const Config& c);
            Config getConfig() const;
            OE_OPTION(std::string, className);
            OE_OPTION(float, density);
            OE_OPTION(float, moisture);
            OE_OPTION(float, rugged);
            OE_OPTION(float, temperature);
        };

    public:
        class OSGEARTHPROCEDURAL_EXPORT Options : public ImageLayer::Options
        {
        public:
            META_LayerOptions(osgEarth, Options, ImageLayer::Options);
            OE_OPTION_LAYER(BiomeLayer, biomeLayer);
            OE_OPTION_LAYER(LandCoverLayer, landCoverLayer);
            OE_OPTION_LAYER(LandCoverDictionary, landCoverDictionary);
            OE_OPTION_VECTOR(LandCoverLifeMapping, landCoverMappings);
            virtual Config getConfig() const;
        private:
            void fromConfig(const Config& conf);
        };

    public:
        META_Layer(osgEarthProcedural, LifeMapLayer, Options, ImageLayer, LifeMap);

        void setBiomeLayer(BiomeLayer*);
        BiomeLayer* getBiomeLayer() const;

        void setLandCoverLayer(LandCoverLayer*);
        LandCoverLayer* getLandCoverLayer() const;

        void setLandCoverDictionary(LandCoverDictionary*);
        LandCoverDictionary* getLandCoverDictionary() const;

    protected:

        virtual void init() override;

        virtual Status openImplementation() override;

        virtual Status closeImplementation() override;

        virtual GeoImage createImageImplementation(const TileKey&, ProgressCallback*) const override;

    public:

        virtual void addedToMap(const Map* map) override; 

        virtual void removedFromMap(const Map* map) override;

    protected:

        virtual ~LifeMapLayer() { }

        osg::observer_ptr<const Map> _map;
        mutable ElevationPool::WorkingSet _workingSet;
        osg::ref_ptr<osg::Image> _noiseFunc;
        osg::ref_ptr<TextureArena> _arena;
        std::unordered_map<int, const LandCoverLifeMapping*> _lcLUT;

        int lookupBiome(double x, double y, float noise) const;

        osg::Vec4 lookupLandCover(float noise, void*) const;

        const LandCoverLifeMapping* lookupLandCoverLifeMapping(int code) const;

        std::future<void> _loadMaterialsJob;
        void loadMaterials(const AssetCatalog*);
    };

} } // namespace osgEarth::Procedural

#endif // OSGEARTH_PROCEDURAL_LIFE_MAP_LAYER_H
