/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_PROCEDURAL_BIOME_LAYER_H
#define OSGEARTH_PROCEDURAL_BIOME_LAYER_H

#include "Export"
#include "Biome"
#include <osgEarth/Layer>
#include <osgEarth/LayerReference>
#include <osgEarth/FeatureSource>

namespace osgEarth
{
    namespace Procedural
    {
        using namespace osgEarth;

        class OSGEARTHPROCEDURAL_EXPORT BiomeLayer : public Layer
        {
        public:
            class OSGEARTHPROCEDURAL_EXPORT Options : public Layer::Options
            {
            public:
                META_LayerOptions(osgEarth, Options, Layer::Options);
                OE_OPTION_LAYER(FeatureSource, controlVectors);
                OE_OPTION_REFPTR(BiomeCatalog, biomeCatalog);
                virtual Config getConfig() const;
            private:
                void fromConfig(const Config& conf);
            };

        public:
            META_Layer(osgEarthProcedural, BiomeLayer, Options, Layer, Biomes);

            //! Results of a call to getNearestBiomes
            struct SearchResult
            {
                int biomeid;
                double range2;

                // sort functor
                bool operator < (const SearchResult& rhs) const {
                    return range2 < rhs.range2;
                }
            };

            //! Returns the N nearest biomes to the input location.
            void getNearestBiomes(
                double x,
                double y,
                unsigned maxCount,
                std::set<SearchResult>& results) const;
                
            //! Get the biome corresponding to the input "id"
            const Biome* getBiome(int id) const;

            const BiomeCatalog* getBiomeCatalog() const;

        protected:

            virtual void init() override;

            virtual Status openImplementation() override;

            virtual Status closeImplementation() override;

        protected:

            FeatureSource* getControlSet() const;

            virtual ~BiomeLayer() { }

            void* _index;
        };

    }
} // namespace osgEarth::Procedural

#endif // OSGEARTH_PROCEDURAL_BIOME_LAYER_H
