/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2020 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTHFEATURES_FEATURE_CURSOR_H
#define OSGEARTHFEATURES_FEATURE_CURSOR_H 1

#include <osgEarth/Common>
#include <osgEarth/Feature>
#include <osgEarth/Filter>
#include <osgEarth/Progress>
#include <osgEarth/Profile>
#include <functional>

namespace osgEarth
{
    class FeatureCursorInterface
    {
    public:
        //! Whether a call to nextFeature() will return a valid feature
        virtual bool hasMore() const = 0;

        //! The next feature, or nullptr if empty
        virtual osg::ref_ptr<const Feature> nextFeature() = 0;
    };

    /**
     * A cursor that lets you iterate over a collection of features returned 
     * from a feature query performed on a FeatureStore.
     */
    class OSGEARTH_EXPORT FeatureCursorImplementation : public FeatureCursorInterface
    {
    public:
        //! Whether a call to nextFeature() will return a valid feature
        virtual bool hasMore() const = 0;

        //! The next feature, or nullptr if empty
        virtual osg::ref_ptr<const Feature> nextFeature() = 0;

        //! Progress callback
        virtual ProgressCallback* getProgress() const {
            return nullptr;
        }
    };

    /**
     * A cursor that lets you iterate over a collection of features returned
     * from a feature query performed on a FeatureStore.
     */
    class OSGEARTH_EXPORT FeatureCursor
    {
    public:
        //! Construct an invalid cursor.
        FeatureCursor();

        //! Construct a cursor based on the provided implementation
        //! @param impl Implementation object
        FeatureCursor(FeatureCursorImplementation* impl);

        //! Construct a cursor that will iterator over a feature list in memory.
        FeatureCursor(const FeatureList& list);

        //! Assign an implementation to this cursor
        void set(FeatureCursorImplementation* impl);

        //! Whether a call to nextFeature() will return a valid feature
        bool hasMore() const;

        //! The next feature, or nullptr if empty
        osg::ref_ptr<const Feature> nextFeature();

        //! Copy all features to the list
        void fill(FeatureList& output);

        //! Copy all features to the list that pass the predicate
        void fill(FeatureList& output, std::function<bool(const Feature*)> predicate);

        //! Pass the function call along to the implementation so you can call
        //! cursor->hasMore() and cursor->nextFeature() per legacy usage.
        inline FeatureCursorInterface* operator -> () {
            return _impl.get();
        }

    private:
        std::shared_ptr<FeatureCursorImplementation> _impl;
    };

    /**
     * A simple cursor implementation that returns features from an in-memory
     * feature list.
     */
    class OSGEARTH_EXPORT FeatureListCursorImpl : public FeatureCursorImplementation
    {
    public:
        FeatureListCursorImpl(const FeatureList& input);

    public: // FeatureCursor
        bool hasMore() const override;
        osg::ref_ptr<const Feature> nextFeature() override;

        FeatureList _features;
        FeatureList::iterator _iter;
    };

#if 0
    /**
     * A simple cursor that returns each Geometry wrapped in a feature.
     */
    class OSGEARTH_EXPORT GeometryFeatureCursor : public FeatureCursor
    {
    public:
        GeometryFeatureCursor( Geometry* geom );
        GeometryFeatureCursor( Geometry* geom, const FeatureProfile* fp, const FeatureFilterChain* filters );

    public: // FeatureCursor
        bool hasMore() const override;
        osg::ref_ptr<const Feature> nextFeature() override;

    protected:
        virtual ~GeometryFeatureCursor();
        osg::ref_ptr<Geometry> _geom;
        osg::ref_ptr<const FeatureProfile> _featureProfile;
        osg::ref_ptr<const FeatureFilterChain> _filterChain;
        osg::ref_ptr<Feature> _lastFeature;
    };
#endif

    /**
     * FeatureCursor wrapper that runs incoming features through a filter chain
     */
    class OSGEARTH_EXPORT FilteredFeatureCursorImpl : public FeatureCursorImplementation
    {
    public:
        FilteredFeatureCursorImpl(
            FeatureCursor& cursor,
            const FeatureFilterChain& chain,
            FilterContext* context);

        bool hasMore() const override;
        osg::ref_ptr<const Feature> nextFeature() override;

    protected:
        virtual ~FilteredFeatureCursorImpl() { }

    private:
        mutable FeatureCursor _cursor;
        FeatureFilterChain _chain;
        FilterContext* _user_cx;
        mutable FeatureList _cache;
    };

} // namespace osgEarth

#endif // OSGEARTHFEATURES_FEATURE_CURSOR_H

