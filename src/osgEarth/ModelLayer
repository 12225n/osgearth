/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2018 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_MODEL_LAYER_H
#define OSGEARTH_MODEL_LAYER_H 1

#include <osgEarth/Common>
#include <osgEarth/VisibleLayer>
#include <osgEarth/Cache>
#include <osgEarth/ModelSource>
#include <osgEarth/MaskSource>
#include <osgEarth/ShaderUtils>
#include <osgEarth/URI>
#include <osg/Node>
#include <vector>

namespace osgEarth
{
    class Map;

    //! Serializable options for a ModelLayer.
    class OSGEARTH_EXPORT ModelLayerOptions : public VisibleLayerOptions
    {
    public:        
        META_LayerOptions(osgEarth, ModelLayerOptions, VisibleLayerOptions);

        optional<URI>& url() { return _url; }
        const optional<URI>& url() const { return _url; }

        optional<float>& lodScale() { return _lod_scale; }
        const optional<float>& lodScale() const { return _lod_scale; }

        optional<GeoPoint>& location() { return _location; }
        const optional<GeoPoint>& location() const { return _location; }

        optional<osg::Vec3>& orientation() { return _orientation;}
        const optional<osg::Vec3>& orientation() const { return _orientation;}

        optional<ShaderPolicy>& shaderPolicy() { return _shaderPolicy; }
        const optional<ShaderPolicy>& shaderPolicy() const { return _shaderPolicy; }
        
        optional<float>& loadingPriorityScale() { return _loadingPriorityScale; }
        const optional<float>& loadingPriorityScale() const { return _loadingPriorityScale; }

        optional<float>& loadingPriorityOffset() { return _loadingPriorityOffset; }
        const optional<float>& loadingPriorityOffset() const { return _loadingPriorityOffset; }

        optional<bool>& paged() { return _paged; }
        const optional<bool>& paged() const { return _paged; }

        //! Whether to enable OpenGL lighting on the model node.
        optional<bool>& lightingEnabled() { return _lighting; }
        const optional<bool>& lightingEnabled() const { return _lighting; }

        //! Masking options for cutting a hole in the terrain to accommodate this model.
        //! Note; the mask will NOT honor any visibility or opacity settings on the
        //! model layer.
        optional<MaskSourceOptions>& mask() { return _maskOptions; }
        const optional<MaskSourceOptions>& mask() const { return _maskOptions; }

        //! Minimum terrain LOD at which to apply the mask (if there if one)
        optional<unsigned>& maskMinLevel() { return _maskMinLevel; }
        const optional<unsigned>& maskMinLevel() const { return _maskMinLevel; }

        //! @deprecated Options for the underlying model source driver
        optional<ModelSourceOptions>& driver() { return _driver; }
        const optional<ModelSourceOptions>& driver() const { return _driver; }


    public:
        virtual Config getConfig() const;

    private:
        void fromConfig( const Config& conf );

        optional<URI> _url;
        optional<float> _lod_scale;
        optional<GeoPoint> _location;
        optional<osg::Vec3> _orientation;
        optional<ShaderPolicy> _shaderPolicy;
        optional<float> _loadingPriorityScale;
        optional<float> _loadingPriorityOffset;
        optional<bool> _paged;

        optional<bool> _lighting;
        optional<MaskSourceOptions>  _maskOptions;
        optional<unsigned> _maskMinLevel;
        
        optional<ModelSourceOptions> _driver;
    };

    struct ModelLayerCallback : public VisibleLayerCallback
    {
        // Nothing - placeholder
        typedef void (ModelLayerCallback::*MethodPtr)(class ModelLayer* layer);
    };


    /**
     * Layer that contains an OSG scene graph
     */
    class OSGEARTH_EXPORT ModelLayer : public VisibleLayer
    {
    public:
        META_Layer(osgEarth, ModelLayer, ModelLayerOptions, VisibleLayer, model);

    public:
        //! Sets the node to add to the map's scene graph. Set this OR setURL
        //! Call this OR setURL, but not both.
        void setNode(osg::Node* node);

        //! URL from which to load the model to use in this layer.
        //! Call this OR setNode, but not both. Call before opening the layer.
        inline void setURL(const URI& url);

        //! LOD scale for the scene graph in this model layer.
        //! Call before opening the layer.
        inline void setLODScale(float value);

        //! Whether the model loaded by setURL() should be paged in versus
        //! loaded immediately. Only applicable when using setURL.
        //! Call before opening the layer.
        inline void setPaged(bool value);

        //! Sets the location at which to position the model.
        //! Call before opening the layer.
        inline void setLocation(const GeoPoint& value);

        //! Sets the orientation (HPR) of the model in degrees
        //! Call before opening the layer.
        inline void setOrientation(const osg::Vec3& value);

        //! Minimum terrain LOD at which to apply the mask.
        //! Call before opening the layer.
        inline void setMaskMinLevel(unsigned value);
        inline unsigned getMaskMinLevel() const;

        //! Whether lighting should affect the model graph
        void setLightingEnabled( bool value );
        bool isLightingEnabled() const;

    public:
        
        //! Boundary geometry for the mask (if one exists)
        virtual osg::Vec3dArray* getOrCreateMaskBoundary(
            float                   heightScale,
            const SpatialReference* srs,
            ProgressCallback*       progress);

    public: // deprecated

        //! @deprecated - subclass ModelLayer instead of using ModelSource plugins
        //! Access the underlying model source.
        ModelSource* getModelSource() const { return _modelSource.get(); }

        //! @deprecated - subclass ModelLayer and override getOrCreateMaskBoundary
        //! Underlying mask source, if one exists.
        MaskSource* getMaskSource() const { return _maskSource.get(); }

    public: // Layer

        //! Open the layer and return its status
        virtual const Status& open();

        //! Called when this layer is added to a Map
        virtual void addedToMap(const Map*);

        //! Called when this layer is removed from a Map
        virtual void removedFromMap(const Map*);

        //! Node created by this model layer
        virtual osg::Node* getNode() const;

        //! Generate a cache ID for this layer
        virtual std::string getCacheID() const;

    protected: // Layer

        //! post-ctor initialization
        virtual void init();

    protected:

        virtual ~ModelLayer();

        osg::ref_ptr<ModelSource>     _modelSource;
        osg::ref_ptr<MaskSource>      _maskSource;
        Revision                      _modelSourceRev;
        osg::ref_ptr<osg::Vec3dArray> _maskBoundary;
        osg::ref_ptr<CacheSettings>   _cacheSettings;
        osg::ref_ptr<osg::Group>      _root;

        mutable Threading::Mutex _mutex; // general-purpose mutex.

        void fireCallback(ModelLayerCallback::MethodPtr method);
    };

    typedef std::vector< osg::ref_ptr<ModelLayer> > ModelLayerVector;

    // inlines
    void ModelLayer::setURL(const URI& value) { options().url() = value; }
    void ModelLayer::setLODScale(float value) { options().lodScale() = value; }
    void ModelLayer::setPaged(bool value) { options().paged() = value; }
    void ModelLayer::setLocation(const GeoPoint& value) { options().location() = value; }
    void ModelLayer::setOrientation(const osg::Vec3& value) { options().orientation() = value; }
    void ModelLayer::setMaskMinLevel(unsigned value) { options().maskMinLevel() = value; }
    unsigned ModelLayer::getMaskMinLevel() const { return options().maskMinLevel().get(); }
}

#endif // OSGEARTH_MODEL_LAYER_H
