<map>
    <libraries>osgEarthProcedural</libraries>

    <options>
        <terrain 
            progressive="true" 
            cast_shadows="true"
            priority_scale="1.5" />
        <cache 
            type="filesystem"
            path="cache" />
    </options>

    <xi:include href="osm_data.xml"/>
    <xi:include href="osm_water_data.xml"/>

    <TMSElevation name="ReadyMap 90m Elevation">
        <url>http://readymap.org/readymap/tiles/1.0.0/116/</url>
        <vdatum>egm96</vdatum>
    </TMSElevation>
    
    <XYZElevation name="Flattened Washington State" min_level="15">
        <url>https://pelican-public.s3.amazonaws.com/tiles/flattened_roads/{z}/{x}/{-y}.tif</url>
        <profile>global-geodetic</profile>
    </XYZElevation>

    <MBTilesElevation name="Nepal" enabled="false">
        <url>D:/data/demo/nepal/nepal.mbtiles</url>
    </MBTilesElevation>
    
    <FlattenedElevation name="Road Flattener" min_level="15" max_data_level="15">
        <features>data:osm</features>
        <filters>
            <script>("highway" in feature.properties)</script>
        </filters>
        <script language="javascript">
            <![CDATA[
                // width of the road surface
                function getLineWidth() {
                    var hwy = feature.properties.highway;
                    if (hwy === "motorway" || hwy === "trunk" || hwy == "primary" || hwy === "secondary") {
                        return 12.0;
                    }
                    return 4.0;
                }

                // buffer around the road
                function getBufferWidth() {
                    return 24.0;
                }
            ]]>
        </script>
        <line_width>getLineWidth()</line_width>
        <buffer_width>getBufferWidth()</buffer_width>
    </FlattenedElevation>

    <GroundCover name="Trees" max_range="4500" max_sse="1000" enabled="true">
        <category>trees</category>
        <cast_shadows>true</cast_shadows>
    </GroundCover>

    <Grass name="Grass" max_range="100" max_sse="35" enabled="true">
        <category>grass</category>
        <spacing>1.0</spacing>
        <color_layer>
            ReadyMap 15m Imagery
        </color_layer>
    </Grass>

    <Wind name="Breeze">
        <winds>
            <wind type="directional" direction="1,0" speed="8 kts"/>
        </winds>
    </Wind>
    
    <Shader name="base"/>

    <LifeMap name="Life Map" shared="true" min_level="11">
        <!-- <cache_policy usage="none"/> -->
        <density_mask_layer>
            <xi:include href="osm_density_mask.xml"/>
        </density_mask_layer>
        <density_color_layer>
            ReadyMap 15m Imagery
        </density_color_layer>
        <shared_sampler>LIFEMAP_TEX</shared_sampler>
        <shared_matrix>LIFEMAP_MAT</shared_matrix>
    </LifeMap>
    
    <TMSImage name="ReadyMap 15m Imagery" enabled="true" shared="true" min_range="7500" attenuation_range="6000">
        <url>http://readymap.org/readymap/tiles/1.0.0/7/</url>
        <shader>
            <![CDATA[
            #pragma vp_entryPoint imageryDraw
            #pragma vp_location fragment
            void imageryDraw(inout vec4 color) {
                color.a = max(color.a, 0.15);
            }
          ]]>
        </shader>
    </TMSImage>

    <RoadSurface name="Road Surface" min_level="16" max_data_level="19">
        <!-- <cache_policy usage="no_cache"/> -->
        <tile_size>512</tile_size>
        <features>data:osm</features>
        <filters>
            <script>("highway" in feature.properties)</script>
        </filters>
        <styles>
            <style type="text/css">
                default {
                   stroke: #ffffff;
                   stroke-width: 15m;
                   stroke-image: "'../data/road3.png'";
                }
            </style>
        </styles>
    </RoadSurface>

    <FeatureImage name="FIL Road Surface" min_level="16" max_data_level="18" enabled="false">
        <!-- <cache_policy usage="no_cache"/> -->
        <profile>spherical-mercator</profile>
        <features>data:osm</features>
        <filters>
            <script>("highway" in feature.properties)</script>
        </filters>
        <styles>
            <style type="text/css">
                default {
                   stroke: #111111;
                   stroke-width: 15m;
                }
            </style>
        </styles>
    </FeatureImage>

    <Biomes name="Biomes" shared="true" visible="false" min_level="14" max_data_level="14">
        <!-- <cache_policy usage="none"/> -->
        <control_vectors>
            <OGRFeatures>
                <url>D:/data/splat/biome_package.gpkg</url>
                <layer>macdaddy</layer>
            </OGRFeatures>
        </control_vectors>
        <biomeid_field>wwf_mhtnum</biomeid_field>
        <blend_radius>0.01</blend_radius>
        <xi:include href="D:/data/splat/biomes.xml"/>
        <shared_sampler>BIOME_TEX</shared_sampler>
        <shared_matrix>BIOME_MAT</shared_matrix>
    </Biomes>

    <FeatureModel name="Political Boundaries" enabled="false">    
        <OGRFeatures name="world-data">
            <url>../data/world.shp</url>
        </OGRFeatures>
        <styles>
            <style type="text/css">
                world {
                   stroke:                   #ffff00;
                   stroke-width:             3px;
                   stroke-tessellation-size: 1km;
                   render-lighting:          false;
                   altitude-clamping:        terrain-drape;
                }            
            </style>
        </styles>
    </FeatureModel>

    <FeatureModel name="Biome Names" enabled="false">
        <cache_policy usage="none"/>
        <OGRFeatures>
            <url>D:/data/splat/biome_package.gpkg</url>
            <layer>macdaddy</layer>
        </OGRFeatures>
        <styles>
            <style>
                default {
                    text-content: [wwf_mhtnam];
                    text-halo: #3f3f3f;
                    text-size: 20.0;
                    text-align: center_center;
                }
            </style>
        </styles>
    </FeatureModel>

    <xi:include href="osm_buildings.xml"/>

    <TerrainConstraint name="constraint:water" features="data:osm-water" remove_interior="false" min_level="12"/>

    <FeatureImage name="OSM Water" features="data:osm-water" min_level="12">
        <profile>spherical-mercator</profile>
        <styles>
            <style>
                water {
                    fill: #0f1f2f;
                }
            </style>
        </styles>
    </FeatureImage>
    
    <FeatureModel name="DEBUG - Biome Shape View" enabled="false">
        <cache_policy usage="none"/>
        <OGRFeatures>
            <url>D:/data/splat/biome_package.gpkg</url>
            <layer>macdaddy</layer>
        </OGRFeatures>
        <layout tile_size="100000"/>
        <Styles>
            <style type="text/css">
                default { 
                    point-fill: #FFFF00;
                    point-size: 3px;
                    stroke: #FF0000; 
                    stroke-width: 3px;
                    altitude-clamping: terrain-drape;
                }
            </style>
        </Styles>
    </FeatureModel>

    <Shader name="DEBUG - Biome View" min_level="14" enabled="false">
        <shader>
            <![CDATA[
                #version 430
                #pragma vp_name Biome View
                #pragma vp_entryPoint oe_debug_biome_view
                #pragma vp_location fragment_coloring
                
                const vec4 colors[16] = vec4[](
                    vec4(1,0,0,1),
                    vec4(1,1,0,1),
                    vec4(1,0,1,1),
                    vec4(0,1,1,1),
                    vec4(0,0,1,1),
                    vec4(1,0.5,0,1),
                    vec4(0,1,0,1),                    
                    vec4(0.5,0,0,1),
                    vec4(0.5,1,0,1),
                    vec4(0.5,0,1,1),
                    vec4(0.5,0.5,0.5,1),
                    vec4(0,0,0.5,1),
                    vec4(1,0.5,0.5,1),
                    vec4(0.5,0.5,0,1),
                    vec4(0,0,0,1), // water
                    vec4(1,1,1,1) // rock and ice
                );
                
                uniform sampler2D BIOME_TEX;
                uniform mat4 BIOME_MAT;
                
                in vec4 oe_layer_tilec;
                
                void oe_debug_biome_view(inout vec4 color)
                {
                    ivec2 st = ivec2((BIOME_MAT*oe_layer_tilec).st * 255.0);
                    int biomeid = int(texelFetch(BIOME_TEX, st, 0).r * 255.0);
                    if (biomeid > 14) biomeid = biomeid-98+14;
                    color = colors[biomeid];
                }
            ]]>
        </shader>
    </Shader>

    <Shader name="DEBUG - DENSITY" min_level="11" enabled="false">
        <shader>
            <![CDATA[
                #version 330
                #pragma vp_entryPoint debug_density
                #pragma vp_location fragment_coloring
                uniform float density_power = 1.0;
                uniform sampler2D LIFEMAP_TEX;
                uniform mat4 LIFEMAP_MAT;
                in vec4 oe_layer_tilec;
                void debug_density(inout vec4 color)
                {               
                    vec4 quad = texture(LIFEMAP_TEX, (LIFEMAP_MAT*oe_layer_tilec).st);
                    color = vec4(0, (quad[0] * density_power), 0, 1);
                }
            ]]>
        </shader>
    </Shader>

    <Shader name="DEBUG - RUGGED" min_level="11" enabled="false">
        <shader>
            <![CDATA[
                #version 330
                #pragma vp_entryPoint debug_rugged
                #pragma vp_location fragment_coloring
                uniform float rugged_power = 1.0;
                uniform sampler2D LIFEMAP_TEX;
                uniform mat4 LIFEMAP_MAT;
                in vec4 oe_layer_tilec;
                void debug_rugged(inout vec4 color)
                {               
                    vec4 quad = texture(LIFEMAP_TEX, (LIFEMAP_MAT*oe_layer_tilec).st);
                    color = vec4((quad[2] * rugged_power), 0, 0, 1);
                }
            ]]>
        </shader>
    </Shader>
    
    <xi:include href="cities.xml"/>
    
    <Debug/>

    <xi:include href="viewpoints.xml"/>
    
    <screen_space_layout sort_by_priority="true"/>
</map>
