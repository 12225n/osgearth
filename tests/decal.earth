<Map name="Press 'd' to drop the bomb">

    <libraries>osgEarthSplat</libraries>

    <options>
        <terrain skirt_ratio="0.05"/>
    </options>

    <ArcGISServerImage name="World Imagery">
        <url>http://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/</url>
        <nodata_image>http://services.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/100/0/0.jpeg</nodata_image>
    </ArcGISServerImage>

    <xi:include href="../data/land_cover_dictionary.xml"/>
    <xi:include href="esa_land_cover.xml"/>

    <SplatImage name="Procedural Imagery" land_cover_layer="LandCover" opacity="0.85">
        <zones>
            <zone name="default">
                <surface>
                    <catalog>../data/splat/splat_catalog.xml</catalog>
                </surface>
            </zone>                
        </zones>
    </SplatImage>

    <TMSElevation name="ReadyMap 90m Elevation" enabled="true">
        <url>http://readymap.org/readymap/tiles/1.0.0/116/</url>
        <vdatum>egm96</vdatum>
    </TMSElevation>

    <!--
    Notes:
    * The min_level needs to be equal to or less than the LOD of groundcover in order
      for the groundcover layer to see the shared sampler.
    * Related to above, a lower LOD requires a larger tile_size to compensate, and this
      in turn slows down the tile gen a lot AND requires a lot more memory!
    * visible="false" doesn't work for some reason -- TODO fix a bug
    -->
    <Decal name="Damage" 
           visible="true"
           attenuation_range="1500"
           min_level="13"
           max_data_level="16"
           shared="true"
           shared_sampler="decal_tex"
           shared_matrix="decal_mat">

        <shader>
            <![CDATA[
            #version 330
            #pragma vp_entryPoint destroy_fs
            #pragma vp_location fragment_coloring            
            
            uniform sampler2D decal_tex;
            in vec2 decal_coords;
            vec4 oe_splat_coverage;
            
            void destroy_fs(inout vec4 color)
            {
                vec4 texel = texture(decal_tex, decal_coords);
                color = vec4(0,0,0, clamp(texel.a,0,0.65));
                //color.a = 0;
            }
         ]]>
        </shader>

    </Decal>
    
    <!-- GPU trees from land cover data -->
    <GroundCover name="Trees" land_cover_layer="LandCover">
        <lod>13</lod>
        <cast_shadows>true</cast_shadows>
        <zones>
            <zone name="default">
                <groundcover>
                    <max_distance>6400</max_distance>
                    <density>3.4</density>
                    <fill>0.75</fill>
                    <brightness>2.0</brightness>
                    <contrast>0.5</contrast>
                    <biomes>
                        <biome classes="forest">
                            <billboard url="../data/splat/cypress.png" width="12.0" height="14.0"/>
                            <billboard url="../data/splat/pine.png"    width="16.0" height="22.0" />
                            <billboard url="../data/splat/pine2.png"   width="15.0" height="18.0"/>
                        </biome>
                    </biomes>
                </groundcover>
            </zone>
        </zones>
    </GroundCover>


    <terrainshader>
        <code>
            <![CDATA[
            #version 330
            #pragma vp_entryPoint destroy_vs
            #pragma vp_location vertex_model
            
            uniform sampler2D decal_tex;
            uniform mat4 decal_mat;
            
            vec4 oe_layer_tilec;
            vec3 vp_Normal;
            out vec2 decal_coords;
            
            // Alters the terrain to form a crater:
            void destroy_vs(inout vec4 vertex)
            {
                // maximum distance to move the vertex:
                const float maxdrop = -20.0;
                vec3 up = vp_Normal;
                decal_coords = (decal_mat * oe_layer_tilec).st;
                vec4 texel = texture(decal_tex, decal_coords);
                float damage = texel.a;
                vertex.xyz += up * maxdrop * damage;
            }
            
            [break]
            
            #version 330
            #pragma vp_entryPoint overrideCoverageVS
            #pragma vp_location vertex_model
            
            uniform sampler2D decal_tex;
            in vec2 decal_coords;
            float oe_LandCover_coverage;
            
            // Overrides the land cover data for a crater
            // (VS version for groundcover)
            void overrideCoverageVS(inout vec4 unused)
            {
                vec4 texel = texture(decal_tex, decal_coords);
                if (texel.a > 0.2)
                    oe_LandCover_coverage = 7;
            }
            
            [break]
            
            #version 330
            #pragma vp_entryPoint overrideCoverageFS
            #pragma vp_location fragment_coloring            
            
            uniform sampler2D decal_tex;
            in vec2 decal_coords;
            vec4 oe_LandCover_coverage;
            
            // Overrides the land cover data for a crater
            // (FS version for splatting)
            void overrideCoverageFS(inout vec4 color)
            {
                vec4 texel = texture(decal_tex, decal_coords);
                if (texel.a > 0.2)
                    oe_LandCover_coverage = vec4(7);
            }
          ]]>
        </code>
    </terrainshader>

    <xi:include href="viewpoints.xml"/>
</Map>
