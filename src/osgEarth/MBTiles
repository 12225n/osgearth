/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2018 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_MBTILES_H
#define OSGEARTH_MBTILES_H

#include <osgEarth/Common>
#include <osgEarth/ImageLayer>
#include <osgEarth/ElevationLayer>
#include <osgEarth/URI>

/**
 * MBTiles - MapBox tile storage specification using SQLite3
 * https://github.com/mapbox/mbtiles-spec
 */

//! Namespace for internal driver classes
namespace osgEarth { namespace MBTiles
{
    /**
     * Underlying driver that does the actual I/O
     */
    class OSGEARTH_EXPORT Driver
    {
    public:
        Status open(
            const URI& uri,
            osg::ref_ptr<const Profile>& profile,
            const std::string& format,
            DataExtentList& dataExtents,
            const osgDB::Options* readOptions);

        ReadResult read(
            const TileKey& key,
            ProgressCallback* progress,
            const osgDB::Options* readOptions) const;

        bool write(
            const TileKey& key,
            osg::Image* image,
            ProgressCallback* progress);

    private:
        void* _db;
        unsigned _minLevel;
        unsigned _maxLevel;
        osg::ref_ptr< osg::Image> _emptyImage;
        osg::ref_ptr<osgDB::ReaderWriter> _rw;
        osg::ref_ptr<osgDB::Options> _dbOptions;
        osg::ref_ptr<osgDB::BaseCompressor> _compressor;
        std::string _tileFormat;
        bool _forceRGB;

        // because no one knows if/when sqlite3 is threadsafe.
        mutable Threading::Mutex _mutex; 

        bool getMetaData(const std::string& name, std::string& value);
        bool putMetaData(const std::string& name, const std::string& value);
        bool createTables();
        void computeLevelsNow();
    };

    /**
     * Base class that mixes in the options with a base Layer class.
     */
    template<typename BASE>
    class OSGEARTH_EXPORT MBTilesLayerOptions : public BASE
    {
    public:
        META_LayerOptions(osgEarth, MBTilesLayerOptions, BASE);  
        OE_OPTION(URI, url);
        OE_OPTION(std::string, format);
        OE_OPTION(bool, compress);
        OE_OPTION(bool, computeLevels);
        virtual inline Config getConfig() const;
    private:
        inline void fromConfig(const Config& conf);
    };
} }

//........................................................................

namespace osgEarth
{
    /**
     * Image layer connected to a TMS (Tile Map Service) facility
     */
    class OSGEARTH_EXPORT MBTilesImageLayer : public ImageLayer
    {
    public: // serialization
        typedef MBTiles::MBTilesLayerOptions<ImageLayer::Options> Options;

    public:
        META_Layer(osgEarth, MBTilesImageLayer, Options, ImageLayer, MBTilesImage);

    public:
        //! Base URL of TileCache endpoint
        void setURL(const URI& value);
        const URI& getURL() const;

        //! Data format to request from the service
        void setFormat(const std::string& value);
        const std::string& getFormat() const;
        
        //! Whether to compress the data. This isn't necessary for formats that
        //! are already compressed, like JPEG
        void setCompress(const bool& value);
        const bool& getCompress() const;
        
        //! Whether or not to automatically compute the valid levels of the MBTiles file.
        //! By default this is true and will scan the table to determine the min/max.
        //! This can take time when first loading the file so if you know the levels of your file
        //! up front you can set this to false and just use the min_level max_level settings
        //! of the tile source.
        void setComputeLevels(const bool& value);
        const bool& getComputeLevels() const;

    public: // Layer
        
        //! Establishes a connection to the database
        virtual const Status& open();

        //! Creates a raster image for the given tile key
        virtual GeoImage createImageImplementation(const TileKey& key, ProgressCallback* progress) const;

    protected: // Layer

        //! Called by constructors
        virtual void init();

    protected:

        //! Destructor
        virtual ~MBTilesImageLayer() { }

    private:
        void* _database;
        unsigned _minLevel;
        unsigned _maxLevel;
        osg::ref_ptr< osg::Image> _emptyImage;
        osg::ref_ptr<osgDB::ReaderWriter> _rw;
        osg::ref_ptr<osgDB::Options> _dbOptions;
        osg::ref_ptr<osgDB::BaseCompressor> _compressor;
        std::string _tileFormat;
        bool _forceRGB;

        // because no one knows if/when sqlite3 is threadsafe.
        mutable Threading::Mutex _mutex; 

        bool getMetaData(const std::string& name, std::string& value);
        bool putMetaData(const std::string& name, const std::string& value);
        bool createTables();
        void computeLevels();
    };

    /**
     * Elevation layer connected to a TMS (Tile Map Service) facility
     */
    class OSGEARTH_EXPORT MBTilesElevationLayer : public ElevationLayer
    {
    public: // serialization
        typedef MBTiles::MBTilesLayerOptions<ElevationLayer::Options> Options;

    public:
        META_Layer(osgEarth, MBTilesElevationLayer, Options, ElevationLayer, MBTilesElevation);

        //! Base URL of TileCache endpoint
        void setURL(const URI& value);
        const URI& getURL() const;

        //! Data format to request from the service
        void setFormat(const std::string& value);
        const std::string& getFormat() const;
        
        //! Whether to compress the data. This isn't necessary for formats that
        //! are already compressed, like JPEG
        void setCompress(const bool& value);
        const bool& getCompress() const;
        
        //! Whether or not to automatically compute the valid levels of the MBTiles file.
        //! By default this is true and will scan the table to determine the min/max.
        //! This can take time when first loading the file so if you know the levels of your file
        //! up front you can set this to false and just use the min_level max_level settings
        //! of the tile source.
        void setComputeLevels(const bool& value);
        const bool& getComputeLevels() const;

    public: // Layer
        
        //! Establishes a connection to the TMS repository
        virtual const Status& open();

        //! Creates a heightfield for the given tile key
        virtual GeoHeightField createHeightFieldImplementation(const TileKey& key, ProgressCallback* progress) const;

    protected: // Layer

        //! Called by constructors
        virtual void init();

    protected:

        //! Destructor
        virtual ~MBTilesElevationLayer() { }

    private:
        osg::ref_ptr<MBTilesImageLayer> _imageLayer;
    };
} // namespace osgEarth

OSGEARTH_SPECIALIZE_CONFIG(osgEarth::MBTilesImageLayer::Options);
OSGEARTH_SPECIALIZE_CONFIG(osgEarth::MBTilesElevationLayer::Options);

// template inlines ......................................................

namespace osgEarth
{   
    template<typename BASE>
    void MBTiles::MBTilesLayerOptions<BASE>::fromConfig(const Config& conf)
    {
        conf.get("filename", _url);
        conf.get("url", _url); // compat for consistency with other drivers
        conf.get("format", _format);
        conf.get("compute_levels", _computeLevels);
        conf.get("compress", _compress);
    }

    template<typename BASE>
    Config MBTiles::MBTilesLayerOptions<BASE>::getConfig() const
    {
        osgEarth::Config conf = BASE::getConfig();
        conf.set("filename", _url);
        conf.set("format", _format);
        conf.set("compute_levels", _computeLevels);
        conf.set("compress", _compress);
        return conf;
    }
}
#endif // OSGEARTH_MBTILES_H
