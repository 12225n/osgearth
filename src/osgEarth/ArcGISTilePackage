/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2018 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_ARCGIS_TILEPACKAGE_H
#define OSGEARTH_ARCGIS_TILEPACKAGE_H

#include <osgEarth/ImageLayer>
#include <osgEarth/URI>
#include <vector>

/**
 * Layers that access an ArcGIS Tile Package file (.tpk)
 * http://pro.arcgis.com/en/pro-app/help/sharing/overview/tile-package.htm
 */
namespace osgEarth
{
    namespace ArcGISTilePackage
    {
        class OSGEARTH_EXPORT BundleReader
        {
        public:
            BundleReader(const std::string& bundleFile, unsigned int bundleSize);

            void init();

            void readIndex(const std::string& filename, std::vector<int>& index);

            osg::Image* readImage(const TileKey& key);

            osg::Image* readImage(unsigned int index);

        protected:
            std::string _bundleFile;
            std::string _indexFile;
            unsigned int _bundleSize;

            std::ifstream _in;

            std::vector< int > _index;

            unsigned int _lod;
            unsigned int _rowOffset;
            unsigned int _colOffset;
        };
    }

    /**
     * Serialization data for the ArcGIS image layer
     */
    class OSGEARTH_EXPORT ArcGISTilePackageImageLayerOptions : public ImageLayerOptions
    {
    public:
        META_LayerOptions(osgEarth, ArcGISTilePackageImageLayerOptions, ImageLayerOptions);
        
        // Location of the tile package file
        optional<URI>& url() { return _url; }
        const optional<URI>& url() const { return _url; }

        virtual Config getConfig() const;

    private:
        void fromConfig(const Config& conf);
        optional<URI>         _url;
    };
}
OSGEARTH_SPECIALIZE_CONFIG(osgEarth::ArcGISTilePackageImageLayerOptions);


namespace osgEarth
{
    /**
     * Image layer connected to an ESRI ArcGIS Tile Package file
     */
    class OSGEARTH_EXPORT ArcGISTilePackageImageLayer : public ImageLayer
    {
    public:
        META_Layer(
            osgEarth, 
            ArcGISTilePackageImageLayer,
            ArcGISTilePackageImageLayerOptions,
            ImageLayer,
            ArcGISTilePackageImage);

    public:
        //! URL of the map service endpoint
        inline void setURL(const URI& value);
        inline const URI& getURL() const;

    public: // Layer
        
        //! Establishes a connection to the service
        virtual const Status& open();

        //! Closes all resources
        virtual void close();

        //! Creates a raster image for the given tile key
        virtual GeoImage createImageImplementation(const TileKey& key, ProgressCallback* progress) const;

    protected: // Layer

        //! Called by constructors
        virtual void init();

    protected:

        //! Destructor
        virtual ~ArcGISTilePackageImageLayer();

    private:
        optional<ProfileOptions> _profileConf;
        unsigned _bundleSize;
        std::string _extension;

        void readConf();
    };


    // ... inline implementations ........................................
    OE_LAYER_PROPERTY_IMPL(ArcGISTilePackageImageLayer, URI, URL, url);

} // namespace osgEarth

#endif // OSGEARTH_ARCGIS_TILEPACKAGE_H
