/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2020 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTHUTIL_PAGEDNODE_H
#define OSGEARTHUTIL_PAGEDNODE_H

#include <osgEarth/Common>
#include <osgEarth/optional>
#include <osgEarth/Threading>
#include <osgEarth/URI>
#include <osgEarth/SceneGraphCallback>

#include <osg/PagedLOD>
#include <osg/LOD>

#include <queue>
#include <list>
#include <memory>
#include <iterator>
#include <unordered_map>

namespace osgUtil {
    class IncrementalCompileOperation;
}

namespace osgEarth { namespace Util
{
    using namespace osgEarth;
    using namespace osgEarth::Threading;

    /**
     * PagedNode is a group with a self-contained paged child.
     * It wraps the details of a PagedNode node into a container
     * that is easier to manage.
     *
     * To use, override the class. Call setNode() with the default
     * node to display, and implement loadChild() to load the 
     * paged child node when it comes within range. Set the page-in
     * range for the paged child node with setRange() and setRangeMode().
     * Finally, call setupPaging() to complete setup.
     */
    class OSGEARTH_EXPORT PagedNode : public osg::Group
    {
    public:
        PagedNode();

        //! Sets the node to display by default when children
        //! are not loaded.
        void setNode(osg::Node* node);

        //! Override to load paged child node
        virtual osg::Node* loadChild() { return 0L; }

        //! Bounding sphere of paged data
        virtual osg::BoundingSphere getChildBound() const;

        //! Returns true by default; override for custom behavior
        virtual bool hasChild() const;

        //! Call this after setting up your data on the attach point
        void setupPaging();

        /**
         * Gets the range factor
         */
        float getRangeFactor() const { return _rangeFactor; }

        /**
         * Sets the range factor
         */
        void setRangeFactor(float rangeFactor) { _rangeFactor = rangeFactor; }

        //! Sets the page-in rage mode (distance v. pixel-size; default is distance)
        void setRangeMode(const osg::LOD::RangeMode);

        //! Sets the range (or pixel size) at which to page in the child data.
        void setRange(float range) { _range = range; }

        //! Gets whether this node is additive.
        bool getAdditive() const { return _additive; }

        //! Sets whether the child replaces the default node (non-additive)
        //! or renders alongside the default node (additive)
        void setAdditive(bool value) { _additive = value; }

    protected:
        osg::Group* _attachPoint;
        osg::PagedLOD* _plod;
        bool _additive;
        optional<float> _range;
        float _rangeFactor;
    };


    class OSGEARTH_EXPORT PagedNode2 : public osg::Node
    {
    public:
        using Loader = std::function<osg::ref_ptr<osg::Node>(Cancelable*)>;

    public:
        PagedNode2();

        void setFunction(const Loader& value) {
            _load = value;
        }

        void setURI(const URI& uri) {
            _uri = uri;
        }

        void setCenter(const osg::Vec3& value) {
            _userBS->center() = value;
        }

        void setRadius(float value) {
            _userBS->radius() = value;
        }

        void setMaxRange(float value) {
            _maxRange = value;
        }

        void setSceneGraphCallbacks(SceneGraphCallbacks* value) {
            _callbacks = value;
        }

        void setReadOptions(const osgDB::Options* value) {
            _readOptions = value;
        }

        void reset();

    public:
        
        virtual void traverse(osg::NodeVisitor& nv) override;

        virtual osg::BoundingSphere computeBound() const override;

        virtual void resizeGLObjectBuffers(unsigned) override;

        virtual void releaseGLObjects(osg::State*) const override;

    protected:

        virtual ~PagedNode2();

    private:
        friend class PagingManager;

        void* _token;
        class PagingManager* _pagingManager;
        osg::ref_ptr<const osgDB::Options> _readOptions;
        osg::ref_ptr<SceneGraphCallbacks> _callbacks;
        osg::ref_ptr<osg::Node> _placeholder;
        std::atomic_bool _loadTriggered;
        std::atomic_bool _callbackFired;
        Future<osg::ref_ptr<osg::Node>> _future;
        Mutex _mutex;
        optional<osg::BoundingSphere> _userBS;
        float _maxRange;
        URI _uri;
        Job _job;
        std::function<osg::ref_ptr<osg::Node>(Cancelable*)> _load;
    };


    template<typename T>
    class SentryTracker
    {
    public:
        struct ListEntry
        {
            ListEntry(T* data) : _data(data) { }
            T* _data;
        };

        using List = std::list<ListEntry>;
        using ListIterator = typename List::iterator;

        struct TableEntry
        {
            ListIterator _listptr;
            T* _data;
        };

        using DataTable = std::unordered_map<T*, TableEntry>;

        SentryTracker()
        {
            _list.emplace_front(nullptr);
            _sentryptr = _list.begin();
        }

        List _list;
        DataTable _table;
        ListIterator _sentryptr;

        inline void* use(T* data, void* token)
        {
            // Find the tracker for this tile and update its timestamp
            if (token)
            {
                TableEntry& e = *static_cast<TableEntry*>(token);
            //auto i = _table.find(data);
            //if (i != _table.end())
            //{
                // existing entry:
                //TableEntry& e = i->second;
                ListEntry& se = (*e._listptr);
                //se->_lastTime = _clock->getTime();
                //se->_lastFrame = _clock->getFrame();

                //const osg::BoundingSphere& bs = data->getBound();
                //float range = nv.getDistanceToViewPoint(bs.center(), true) - bs.radius();
                //se->_lastRange = std::min(se->_lastRange, range);

                // Move the tracker to the front of the list (ahead of the sentry).
                // Once a cull traversal is complete, all visited tiles will be
                // in front of the sentry, leaving all non-visited tiles behind it.
                _list.splice(_list.begin(), _list, e._listptr);
                e._listptr = _list.begin();
                return &e;
            }
            else
            {
                // New entry:
                _list.emplace_front(data); // ListEntry
                TableEntry& e = _table[data];
                e._data = data;
                e._listptr = _list.begin();
                return &e;
            }
        }

        inline void collectTrash(
            osg::NodeVisitor& nv,
            float fartherThanRange,
            unsigned maxCount,
            const std::function<void(T* obj)>& dispose)
        {
            // After cull, all visited tiles are in front of the sentry, and all
            // non-visited tiles are behind it. Start at the sentry position and
            // iterate over the non-visited tiles, checking them for deletion.
            ListIterator i = _sentryptr;
            ListIterator tmp;
            unsigned count = 0;

            //std::list<osg::observer_ptr<T>> trash;

            for (++i; i != _list.end() && count < maxCount; ++i)
            {
                ListEntry& se = *i;

                // back up the iterator so we can safely erase the entry:
                tmp = i;
                --i;

                // user disposal function
                dispose(se._data);

                // remove it from the main tile table:
                _table.erase(se._data);

                // remove it from the tracker list:
                _list.erase(tmp);

                ++count;
            }

            // reset the sentry.
            _list.emplace_front(nullptr);
            _list.erase(_sentryptr);
            _sentryptr = _list.begin();
        }
    };


    class OSGEARTH_EXPORT PagingManager : public osg::Group
    {
    public:

        PagingManager();

        inline void* use(PagedNode2* node, void* token) {
            ScopedMutexLock lock(_trackerMutex);
            return _tracker.use(node, token);
        }

    public:
        void traverse(osg::NodeVisitor& nv) override;

    private:

        struct PagingOperation {
            osg::observer_ptr<PagedNode2> _host;
            Future<bool> _compileJob;
        };
        using PagingOperationPtr = std::shared_ptr<PagingOperation>;
        using CompileQueue = std::queue<PagingOperationPtr>;
        using MergeQueue = std::queue<PagingOperationPtr>;

        CompileQueue _compileQueue;
        MergeQueue _mergeQueue;
        mutable Mutex _mutex;

        optional<osg::observer_ptr<osgUtil::IncrementalCompileOperation>> _ico;

        Mutex _trackerMutex;
        SentryTracker<PagedNode2> _tracker;

        std::list<osg::observer_ptr<PagedNode2>> _trash;

        friend class PagedNode2;
    };

} }

#endif // OSGEARTHUTIL_PAGEDNODE_H
