/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2018 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_LAND_COVER_LAYER
#define OSGEARTH_LAND_COVER_LAYER 1

#include <osgEarth/ImageLayer>
#include <osgEarth/LandCover>

namespace osgEarth
{    
    /**
     * Layer that provides land cover raster data, in which each texel 
     * contains a land cover code as defined in the LandCoverDictionary.
     * This appears in a Map as a shared, non-visible Layer.
     */
    class OSGEARTH_EXPORT LandCoverLayer : public ImageLayer
    {
    public: // serialization
        class OSGEARTH_EXPORT Options : public ImageLayer::Options {
        public:
            META_LayerOptions(osgEarth, Options, ImageLayer::Options);
            OE_OPTION_VECTOR(ConfigOptions, coverages);
            OE_OPTION(float, warpFactor);
            OE_OPTION(unsigned, noiseLOD);
            virtual Config getConfig() const;
        private:
            void fromConfig(const Config& conf);
        };

    public:
        META_Layer(osgEarth, LandCoverLayer, Options, ImageLayer, LandCover);

        //! Sets the coverage warping factor
        void setWarpFactor(const float& value);
        const float& getWarpFactor() const;

        //! Sets the LOD of the noise texture
        void setNoiseLOD(const unsigned& value);
        const unsigned& getNoiseLOD() const;

        //! Adds a coverage layer definition (TODO: add actual layer, not options)
        void addCoverage(LandCoverCoverageLayer* layer);

        //! Given a land cover tile, which you can generate by calling
        //! createImage, get the land cover class at the given parametric
        //! coordinates [0..1].
        const LandCoverClass* getClassByUV(const GeoImage& tile, double u, double v) const;

    public: // Layer

        virtual const Status& open();

        virtual void addedToMap(const class Map*);

        virtual GeoImage createImageImplementation(const TileKey& key, ProgressCallback*) const;

    protected: // Layer

        virtual void init();

    protected: // TerrainLayer

        osg::ref_ptr<LandCoverDictionary> _lcDictionary;
        std::vector<float> _warps;
        typedef std::vector<int> CodeMap;
        std::vector<CodeMap> _codemaps;
        typedef std::vector<osg::ref_ptr<LandCoverCoverageLayer> > CoverageLayerVector;
        CoverageLayerVector _coverageLayers;

        GeoImage createMetaImageComponent(const TileKey& key, ProgressCallback* progress) const;

        void buildCodeMap(const LandCoverCoverageLayer*, CodeMap&);

        struct MetaImageComponent {
            MetaImageComponent() : pixel(0L) { }
            osg::ref_ptr<osg::Image> image;
            osg::Matrix scaleBias;
            ImageUtils::PixelReader pixel;
        };
        typedef std::map<TileKey, MetaImageComponent> MetaImage;
        bool readMetaImage(MetaImage&, const TileKey&, double, double, osg::Vec4f& output, ProgressCallback*) const;
    };

} // namespace osgEarth

OSGEARTH_SPECIALIZE_CONFIG(osgEarth::LandCoverLayer::Options);

#endif // OSGEARTH_LAND_COVER_LAYER
