/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2018 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_IMGUI_SYSTEM_GUI
#define OSGEARTH_IMGUI_SYSTEM_GUI

#include "ImGui"
#include <osgEarth/Threading>
#include <osgEarth/Memory>
#include <osgEarth/GLUtils>
#include <osgEarth/ShaderLoader>
#include <osgEarth/Registry>
#include <osgEarth/Capabilities>
#include <chrono>
#include <list>

namespace osgEarth
{
    namespace GUI
    {
        using namespace osgEarth;
        using namespace osgEarth::Threading;

        class SystemGUI : public BaseGUI
        {
        private:
            std::string _renderMode;
            bool _renderViewNormals;
            bool _renderModelNormals;
            bool _renderWinding;
            bool _renderOutlines;
            bool _showArenaControls;

        public:
            SystemGUI() : BaseGUI("System"),
                _renderViewNormals(false), _renderModelNormals(false),
                _renderWinding(false), _renderOutlines(false),
                _showArenaControls(false){ }

            void load(const Config& conf) override
            {
                conf.get("ImGui.FontGlobalScale", ImGui::GetIO().FontGlobalScale);
            }

            void save(Config& conf) override
            {
                conf.set("ImGui.FontGlobalScale", ImGui::GetIO().FontGlobalScale);
            }

            void draw(osg::RenderInfo& ri) override
            {
                if (!isVisible())
                    return;

                ImGui::Begin(name(), visible());
                {
                    auto pb = Memory::getProcessPrivateUsage();
                    ImGui::Text("Mem Alloc: %.1lf MB",
                        (double)(pb - osgEarth::g_startupPrivateBytes) / 1048576.0);
                    ImGui::SameLine();
                    ImGui::Text(" Total: %.1lf MB", (double)pb / 1048576.0);

                    ImGui::Separator();
                    auto flags = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_RowBg;
                    if (ImGui::BeginTable("thread pools", 6, flags))
                    {
                        auto metrics = jobs::get_metrics();

                        auto all_pool_metrics = metrics->all();

                        ImGui::TableNextColumn(); ImGui::Text("Pool");
                        ImGui::TableNextColumn(); ImGui::Text("Run"); ImGui::SetItemTooltip("Running");
                        ImGui::TableNextColumn(); ImGui::Text("Mrg"); ImGui::SetItemTooltip("Merging / postprocessing");
                        ImGui::TableNextColumn(); ImGui::Text("Que"); ImGui::SetItemTooltip("Queued jobs (waiting to run)");
                        //ImGui::TableNextColumn(); ImGui::Text("Can"); ImGui::SetItemTooltip("Canceled jobs");
                        ImGui::TableNextColumn(); ImGui::Text("Max"); ImGui::SetItemTooltip("Number of available threads");
                        ImGui::TableNextColumn();

                        for(auto pool_metrics : all_pool_metrics)
                        {
                            if (pool_metrics && pool_metrics->total > 0)
                            {
                                ImGui::TableNextColumn();
                                ImGui::Text("%s", (pool_metrics->name.empty() ? "default" : pool_metrics->name.c_str()));

                                ImGui::TableNextColumn(); ImGui::Text("%d", (int)pool_metrics->running);
                                ImGui::TableNextColumn(); ImGui::Text("%d", (int)pool_metrics->postprocessing);
                                ImGui::TableNextColumn(); ImGui::Text("%d", (int)pool_metrics->pending);
                                //ImGui::TableNextColumn(); ImGui::Text("%d", (int)pool_metrics->canceled);
                                ImGui::TableNextColumn(); ImGui::Text("%d", (int)pool_metrics->concurrency);

                                ImGui::TableNextColumn();
                                ImGui::PushID((std::uintptr_t)pool_metrics);
                                int pc = pool_metrics->concurrency;
                                if (ImGui::InputInt("", &pc))
                                    jobs::get_pool(pool_metrics->name)->set_concurrency(
                                        std::max(1, std::min(pc, (int)std::thread::hardware_concurrency())));
                                ImGui::PopID();
                            }
                        }
                        ImGui::EndTable();
                    }
                    ImGui::Separator();
                    ImGui::Text("Total: %d", jobs::get_metrics()->totalJobs());
                    ImGui::SameLine();

                    int icojobs = 0;
                    auto pager = view(ri)->getDatabasePager();
                    if (pager) {
                        auto ico = pager->getIncrementalCompileOperation();
                        if (ico) {
                            icojobs = ico->getToCompile().size();
                        }
                    }
                    ImGui::Text(" ICO: %d", icojobs);
                    ImGui::Checkbox("Advanced arena controls", &_showArenaControls);

                    ImGui::Separator();

                    if (ImGuiLTable::Begin("FontScale"))
                    {
                        if (ImGuiLTable::SliderFloat("Font Scale", &ImGui::GetIO().FontGlobalScale, 0.5f, 2.0f))
                            dirtySettings();

                        ImGuiLTable::End();
                    }

                    ImGui::Separator();
                    if (ImGuiLTable::Begin("caps"))
                    {
                        auto& caps = osgEarth::Registry::capabilities();
                        ImGuiLTable::Text("osgEarth", osgEarthGetVersion());
                        ImGuiLTable::Text("OSG", osgGetVersion());
                        ImGuiLTable::Text("GL_VENDOR", caps.getVendor().c_str());
                        ImGuiLTable::Text("GL_RENDERER", caps.getRenderer().c_str());
                        ImGuiLTable::Text("GL_VERSION", caps.getVersion().c_str());
                        ImGuiLTable::End();
                    }
                }
                ImGui::End();
            }
        };
    }
}

#endif // OSGEARTH_IMGUI_SYSTEM_GUI
