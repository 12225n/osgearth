/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2020 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_SDF_H
#define OSGEARTH_SDF_H

#include <osgEarth/Common>
#include <osgEarth/Feature>
#include <osgEarth/GLUtils>
#include <osg/Image>

namespace osg {
    class Uniform;
}

namespace osgEarth { namespace Util
{
    class Session;

    class OSGEARTH_EXPORT SDFGenerator
    {
    public:
        SDFGenerator();

        //! Encode a nearest-neighbor field for vector data. Each pixel contains
        //! the coordinates of the nearest pixel with feature data. The coordinate
        //! system is [x,y] relate to the lower-left corner.
        //!
        //! You may pass this field to the createDistanceField function to convert
        //! it to a distance field.
        //!
        //! @param features Features to use for distance calculation
        //! @param session Feature Session containing feature data context
        //! @param size Size of raster to create
        //! @param extent Geospatial extent of the raster
        //! @param nnfield Input/output nearest neighbor field
        //! @param progress Progress tracker object
        bool createNearestNeighborField(
            const FeatureList& features,
            Session* session,
            unsigned size,
            const GeoExtent& extent,
            osg::ref_ptr<osg::Image>& nnfield,
            Cancelable* progress) const;

        //! Encode a nearest-neighbor field from a raster image.
        bool createNearestNeighborField(
            const osg::Image* inputRaster,
            osg::ref_ptr<osg::Image>& nnfield,
            Cancelable* progress) const;

        //! Encode a distance field into an image.
        //! @param nnfield Input NN Field to conver to a distance field
        //! @param sdf Distance field to populate (additively)
        //! @param extent Geospatial extent of the image
        //! @param min_dist Distances <= min_dist are encoded as 0.0
        //! @param max_dist Distances >= max_dist are encoded as 1.0
        //! @param progress Progress tracker object
        void createDistanceField(
            const osg::Image* in_nnfield,
            osg::ref_ptr<osg::Image>& sdf,
            float extent,
            float min_dist,
            float max_dist,
            Cancelable* progress) const;

    private:

        void compute_nnf_on_gpu(osg::Image* buf) const;
        void compute_nnf_on_cpu(osg::Image* buf) const;

        struct NNFSession : public ComputeImageSession
        {
        public:
            NNFSession() : _L_uniform(-1) { }
            void renderImplementation(osg::State* state) override;
            GLint _L_uniform;
        };

        PerThreadComputeSession<NNFSession> _compute;
        osg::ref_ptr<osg::Program> _program;

    };
} } // osgEarth::Util


#endif // OSGEARTH_SDF_H
