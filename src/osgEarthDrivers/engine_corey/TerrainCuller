/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2008-2014 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#pragma once

#include "TerrainRenderData"
#include <unordered_map>

using namespace osgEarth;

namespace osgEarth
{
    class Layer;
    class PatchLayer;

    namespace Corey
    {
        class TileNode;
        struct EngineData;

        struct LayerExtent
        {
            LayerExtent() : _revision(-1) { }
            osg::observer_ptr<const Layer> _layer;
            Revision _revision;
            GeoExtent _extent;
        };
        using LayerExtentMap = std::unordered_map<UID, LayerExtent>;


        struct CullData
        {
            int _mapRevision = 0;
            EngineData* _data;
            std::stack<TileNode*> _tileNodeStack;
            DrawTileCommand* _firstDrawCommandForTile;
            unsigned _orphanedPassesDetected;
            LayerExtentMap* _layerExtents;
            std::vector<PatchLayer*> _patchLayers;
            double _lastTimeVisited = 0.0;
            bool _acceptSurfaceNodes = true;
            TerrainRenderData _renderData;
            bool _isSpy = false;
            std::list<TileKey> _staleTiles;

            void reset(
                osgUtil::CullVisitor* cv,
                TerrainRenderData::PersistentData& pd,
                EngineData& data);

            DrawTileCommand* addDrawCommand(
                UID sourceUID,
                const TileRenderModel* model,
                const RenderingPass* pass,
                TileNode* node,
                osgUtil::CullVisitor* cv);
        };

        /**
        * Custom culling code for a TileNode that primarily handles patch layers.
        */
        class TileNodeCuller : public osg::Callback
        {
        public:
            EngineData* _data;
            TileNodeCuller(EngineData& data) : _data(&data) { }

            // osg::Callback
            bool run(osg::Object* object, osg::Object* data) override;
        };

        /**
        * Custom culling code a the tile drawable that handles shared geometries,
        * draw commands, and NVGL support
        */
        struct TileDrawableCuller : public osg::DrawableCullCallback
        {
        public:
            EngineData* _data;
            TileDrawableCuller(EngineData& data) : _data(&data) { }

            // osg::Callback
            bool cull(osg::NodeVisitor* nv, osg::Drawable* drawable, osg::RenderInfo* renderInfo) const override;
        };

    }
} // namespace 
