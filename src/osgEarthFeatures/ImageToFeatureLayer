/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2018 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_FEATURES_IMAGE_TO_FEATURE_LAYER_H
#define OSGEARTH_FEATURES_IMAGE_TO_FEATURE_LAYER_H 1

#include <osgEarthFeatures/FeatureSource>
#include <osgEarth/LayerListener>

namespace osgEarth {
    class ImageLayer;
}

namespace osgEarth { namespace Features
{
    /** Options structure for serialization of the FeatureSourceLayer */
    class ImageToFeatureSourceOptions : public FeatureSourceOptions
    {
    public:
        META_LayerOptions(osgEarth, ImageToFeatureSourceOptions, FeatureSourceOptions);

        //! Name of the image layer to convert to feature data
        optional<std::string>& imageLayer() { return _imageLayerName; }
        const optional<std::string>& imageLayer() const { return _imageLayerName; }

        //! Level of detail from which to extract features
        optional<unsigned>& level() { return _level; }
        const optional<unsigned>& level() const { return _level; }

        //! Attribute name to set with feature value (default is "value")
        optional<std::string>& attribute() { return _attribute; }
        const optional<std::string>& attribute() const { return _attribute; }

    public:
        virtual Config getConfig() const;

    private:
        void fromConfig(const Config& conf);
        optional<std::string> _imageLayerName;
        optional<unsigned> _level;
        optional<std::string> _attribute;
    };


    /**
     * A FeatureSourceLayer that extracts features from raster data in
     * an image layer.
     */
    class OSGEARTHFEATURES_EXPORT ImageToFeatureSource : public FeatureSource
    {
    public:
        META_Layer(osgEarth, ImageToFeatureSource, ImageToFeatureSourceOptions, FeatureSource, imagetofeature);

        //! Image layer to use to convert raster data to features
        void setImageLayer(ImageLayer* layer);

    public: // FeatureLayer
        
        virtual FeatureCursor* createFeatureCursor(
            const Symbology::Query& query,
            ProgressCallback* progress);

    public: // Layer

        virtual void init();

        virtual const Status& open();

        virtual void addedToMap(const Map*);

        virtual void removedFromMap(const Map*);

    protected:
        
        LayerListener<ImageToFeatureSource, ImageLayer> _imageLayerListener;
        osg::observer_ptr<ImageLayer> _layer;
    };

} } // namespace osgEarth::Features

#endif // OSGEARTH_FEATURES_IMAGE_TO_FEATURE_LAYER_H
