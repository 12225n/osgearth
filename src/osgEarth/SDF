/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2020 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_SDF_H
#define OSGEARTH_SDF_H

#include "Common"
#include "Feature"
#include "GeoData"
#include "ImageLayer"
#include "FilterContext"
#include "Expression"
#include "FeatureImageLayer"
#include "GLUtils"

namespace osg {
    class Uniform;
}

namespace osgEarth { namespace Util
{
    class OSGEARTH_EXPORT SDFGenerator
    {
    public:
        //! Encode a signed distance field into a channel of the geoimage.
        //! @param features Features to use for distance calculation
        //! @param image Image to which to encode the SDF
        //! @param extent Geospatial extent of the image
        //! @param channel Image channel to which to encode distance value
        //! @param minDistance Distances <= minDistance are encoded as 0.0
        //! @param maxDistance Distances >= maxDistance are encoded as 1.0
        //! @param invert true to invert the selection and encode the interiors instead
        void encodeSDF(
            const FeatureList& features,
            osg::Image* image,
            const GeoExtent& extent,
            GLenum channel,
            FilterContext& fctx,
            const NumericExpression& min_dist_meters,
            const NumericExpression& max_dist_meters,
            bool invert,
            Cancelable* progress);
    };
} }

namespace osgEarth
{
    /**
     * Rasterizes feature data into an image layer.
     */
    class OSGEARTH_EXPORT FeatureSDFLayer : 
        public osgEarth::ImageLayer,
        public osgEarth::Util::FeatureImageRenderer
    {
    public: // serialization
        class OSGEARTH_EXPORT Options : public ImageLayer::Options {
        public:
            META_LayerOptions(osgEarth, Options, ImageLayer::Options);
            OE_OPTION_LAYER(FeatureSource, featureSource);
            OE_OPTION_VECTOR(ConfigOptions, filters);
            OE_OPTION_LAYER(StyleSheet, styleSheet);
            OE_OPTION(bool, invert);
            virtual Config getConfig() const;
        private:
            void fromConfig(const Config& conf);
        };

    public:
        META_Layer(osgEarth, FeatureSDFLayer, Options, osgEarth::ImageLayer, FeatureSDF);

        //! Sets the feature source to get road data from; call either this
        //! or setFeatureSourceLayer
        void setFeatureSource(FeatureSource* source);
        inline FeatureSource* getFeatureSource() const;

        //! Style sheet to use to render feature data
        void setStyleSheet(StyleSheet* styles);
        inline StyleSheet* getStyleSheet() const;

    public: // FeatureImageRenderer

        virtual bool renderFeaturesForStyle(
            Session* session,
            const Style& style,
            const FeatureList& features,
            const GeoExtent& imageExtent,
            osg::Image* out_image,
            std::shared_ptr<UserData>& userdata,
            Cancelable* progress) const override;

        virtual void postProcess(
            osg::Image* out_image,
            std::shared_ptr<UserData>& userdata) const override;

    public: // ImageLayer

        // Opens the layer and returns a status
        virtual Status openImplementation() override;

        virtual GeoImage createImageImplementation(
            const TileKey& key,
            ProgressCallback* progress) const override;

    protected: // Layer

        // Called by Map when it adds this layer
        virtual void addedToMap(const class Map*) override;

        // Called by Map when it removes this layer
        virtual void removedFromMap(const class Map*) override;

        // post-ctor initialization
        virtual void init() override;

    protected:

        virtual ~FeatureSDFLayer() { }

    private:
        osg::ref_ptr<Session> _session;
        osg::ref_ptr<const FeatureProfile> _featureProfile;

        void updateSession();

        void establishProfile();

        mutable osg::ref_ptr<osg::Program> _program;

        void compute_sdf_on_gpu(
            osg::Image* image) const;

        void compute_sdf_on_cpu(
            osg::Image* buf) const;

        struct JFASession {
            osg::ref_ptr<osg::StateSet> _stateSet;
            osg::Texture2D* _tex;
            GLint _L_uniform;
            GLuint _pbo;
            void render(osg::Image* out_image, osg::State* state);
            void readback(osg::Image* out_image, osg::State* state);
        };
        using JFASessionPtr = std::shared_ptr<JFASession>;
        using JFASessionPerThread = Mutexed<std::unordered_map<unsigned, JFASessionPtr>>;
        mutable JFASessionPerThread _jfa;
        osg::ref_ptr<FeatureImageLayer> _sdfRenderer;

        void jfa(
            Session* session,
            const FeatureList& features,
            osg::Image* out_image,
            std::shared_ptr<UserData>& userdata,
            const GeoExtent& extent,
            GLenum channel,
            const NumericExpression& min_dist_meters,
            const NumericExpression& max_dist_meters,
            bool invert,
            Cancelable* progress) const;

        struct ConvolveSession {
            osg::ref_ptr<osg::StateSet> _stateSet;
            osg::Texture2D* _tex;
            osg::Texture2D* _outputtex;
            GLuint _pbo;
            void render(osg::Image* out_image, osg::State* state);
            void readback(osg::Image* out_image, osg::State* state);
        };

        using ConvolveSessionPtr = std::shared_ptr<ConvolveSession>;
        using ConvolveDataPerThread = Mutexed<std::unordered_map<unsigned, ConvolveSessionPtr>>;
        mutable ConvolveDataPerThread _convolveData;

        void convolve(
            Session* session,
            const FeatureList& features,
            osg::Image* out_image,
            std::shared_ptr<UserData>& userdata,
            const GeoExtent& extent,
            GLenum channel,
            const NumericExpression& min_dist_meters,
            const NumericExpression& max_dist_meters,
            bool invert,
            Cancelable* progress) const;

    };    
    
    // template/inline impls .................................................

    FeatureSource* FeatureSDFLayer::getFeatureSource() const { return options().featureSource().getLayer(); }
    StyleSheet* FeatureSDFLayer::getStyleSheet() const { return options().styleSheet().getLayer(); }

}

#endif // OSGEARTH_SDF_H
