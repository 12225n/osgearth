/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2018 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_BING_H
#define OSGEARTH_BING_H

#include <osgEarth/Common>
#include <osgEarth/ImageLayer>
#include <osgEarth/URI>
#include <osgEarth/Random>

/**
 * Bing image layer endpoint.
 * Bing maps requires a license
 * https://msdn.microsoft.com/en-us/library/ff428643.aspx
 */
namespace osgEarth
{
    /**
     * Serialization data for the Bing image layer
     */
    class OSGEARTH_EXPORT BingImageLayerOptions : public ImageLayerOptions
    {
    public:
        META_LayerOptions(osgEarth, BingImageLayerOptions, ImageLayerOptions);
        
        optional<std::string>& apiKey() { return _apiKey; }
        const optional<std::string>& apiKey() const { return _apiKey; }

        optional<std::string>& imagerySet() { return _imagerySet; }
        const optional<std::string>& imagerySet() const { return _imagerySet; }
        
        optional<URI>& imageryMetadataURL() { return _imageryMetadataURL; }
        const optional<URI>& imageryMetadataURL() const { return _imageryMetadataURL; }

        virtual Config getConfig() const;

    private:
        void fromConfig(const Config& conf);
        optional<std::string> _apiKey;
        optional<std::string> _imagerySet;
        optional<URI> _imageryMetadataURL;
    };
}
OSGEARTH_SPECIALIZE_CONFIG(osgEarth::BingImageLayerOptions);


namespace osgEarth
{
    /**
     * Image layer connected to a Microsoft Bing Maps API endpoint
     */
    class OSGEARTH_EXPORT BingImageLayer : public ImageLayer
    {
    public:
        META_Layer(
            osgEarth, 
            BingImageLayer,
            BingImageLayerOptions,
            ImageLayer,
            BingImage);

    public:
        //! User's API key
        inline void setAPIKey(const std::string& value);
        inline const std::string& getAPIKey() const;

        //! Bing imagery set to access (default is Aerial)
        inline void setImagerySet(const std::string& value);
        inline const std::string& getImagerySet() const;

        //! Metadata API endpoint
        inline void setImageryMetadataURL(const URI& value);
        inline const URI& getImageryMedataURL() const;

    public: // Layer
        
        //! Establishes a connection to the service
        virtual const Status& open();

        //! Closes all resources
        virtual void close();

        //! Creates a raster image for the given tile key
        virtual GeoImage createImageImplementation(const TileKey& key, ProgressCallback* progress) const;

    protected: // Layer

        //! Called by constructors
        virtual void init();

    protected:

        //! Destructor
        virtual ~BingImageLayer();

    private:
        typedef LRUCache<std::string, std::string> TileURICache;
        bool _debugDirect;
        TileURICache* _tileURICache;
        mutable OpenThreads::Atomic _apiCount;

        std::string getQuadKey(const TileKey&) const;
        std::string getDirectURI(const TileKey&) const;
    };


    // ... template implementations ......................................

    void BingImageLayer::setAPIKey(const std::string& value) { options().apiKey() = value; }
    const std::string& BingImageLayer::getAPIKey() const { return options().apiKey().get(); }

    void BingImageLayer::setImagerySet(const std::string& value) { options().imagerySet() = value; }
    inline const std::string& BingImageLayer::getImagerySet() const { return options().imagerySet().get(); }

    void BingImageLayer::setImageryMetadataURL(const URI& value) { options().imageryMetadataURL() = value; }
    const URI& BingImageLayer::getImageryMedataURL() const { return options().imageryMetadataURL().get(); }

} // namespace osgEarth

#endif // OSGEARTH_TMS_H
