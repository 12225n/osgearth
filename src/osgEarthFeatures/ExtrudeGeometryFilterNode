#pragma once

#include <osg/Object>
#include <osg/Group>
#include <osg/Matrixd>

#include <osgEarth/URI>

namespace osg
{
   class Group;
}

namespace osgEarth {
   namespace Features
   {
      class ExtrudeGeometryFilterNode : public osg::Object
      {
      public:
         struct ModelSymbol
         {
            URI instanceURI;
            osg::Matrixd xform;
         };

         ExtrudeGeometryFilterNode();
         ExtrudeGeometryFilterNode(osg::Group* extrusionGroup, const osg::Matrixd& xform);

         ExtrudeGeometryFilterNode(const ExtrudeGeometryFilterNode & rhs, const osg::CopyOp& copyop);

         META_Object(osgEarth::Features, ExtrudeGeometryFilterNode);


         const osg::Group * get_extrusionGroup() const {
            return _extrusionGroup.get();
         }

         void set_extrusionGroup(osg::Group * group) { _extrusionGroup = group; }

         const osg::Matrixd& get_xform() const { return _xform; }
         void set_xform(const osg::Matrixd& xform) { _xform = xform; }

         void clearExtrusionGroup()
         {
            _extrusionGroup = 0;
         }
         // not sure this is used
         //osg::Group* attachPoint() { return _attachPoint; }

      private:
         osg::ref_ptr<osg::Group> _extrusionGroup;
//         osg::ref_ptr<osg::Group> _attachPoint;
         osg::Matrixd _xform;
      };
   }
}